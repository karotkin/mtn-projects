<?xml version="1.0"?>

<project name="karotkin_test" default="dist" basedir=".">
<!--
<property name="config" location="config"/>
<property name="lib" location="lib"/>
<property name="src" location="src"/>
<property name="test" location="test"/>
<property name="build" location="build"/>
<property name="jar" location="jar"/>
<property name="dist" location="dist"/>
<property name="temp" location="temp"/>
-->
<property file="config/project.properties"/>

<path id="build.classpath">
	<fileset dir="${lib}">
	<include name="**/*.jar"/>
	</fileset>
</path>

<!--clean target which deletes all files created during previous build-->
<target name="clean">
	<delete dir="${build}"/>
	<delete dir="${jar}"/>
	<delete dir="${tmp}"/>
	<delete dir="${dist}"/>
</target>

<!--init target which initialize some global build properties (current time and date, name of project folders)-->
<target name="init" depends="clean">
        <tstamp>
                <format property="component.timestamp" pattern="yyyy_MM_dd_hh_mm_ss_aa"/>
        </tstamp>
<mkdir dir="${build}"/>
</target>

<!--compile target which compiles .java into .class-->
<target name="compile" depends="init" >
	<javac srcdir="${src}" destdir="${build}" includeantruntime="false"  classpathref="build.classpath"/>
</target>

<!--test target which executes test inside test folder-->
<target name="test" depends="compile">
	<javac srcdir="${src}" destdir="${test}" includeantruntime="false"  classpathref="build.classpath"/>
	<junit>
		<classpath>
			<pathelement path="lib/junit-4.11.jar"/>
			<pathelement path="lib/commons-collections-3.2.1.jar"/>
			<pathelement path="lib/hamcrest-core-1.3.jar"/>
		</classpath>
		<formatter type="brief" usefile="false"/> 
		<batchtest>
			<fileset dir="${test}">
				<include name="${test}/com/test/*.java"/>
			</fileset>
		</batchtest>
	</junit>
<echo> Testing was successfull </echo>
</target>


<!--jar target which create .jar file from compiled class-->
<target name="jar" depends="test">
	<mkdir dir="${jar}"/>
	<jar destfile="${jar}/karotkin.jar" basedir="${build}"/>
</target>

<!--dist target which create artifact containing built jar file, properties file and all runtime dependencies (Apache commons library)-->
<target name="dist" depends="jar">
	<mkdir dir="${dist}" />
	<mkdir dir="${temp}" />
	<copy file="${jar}/karotkin.jar" todir="${temp}" />
	<copy todir="${temp}">
		<fileset dir="${lib}" />
	</copy>
	<copy file="${config}/project.properties" todir="${temp}"/>
	<zip destfile="${dist}/${component.timestamp}_karotkin.zip" basedir="${temp}" update="true" />
</target>
</project>

